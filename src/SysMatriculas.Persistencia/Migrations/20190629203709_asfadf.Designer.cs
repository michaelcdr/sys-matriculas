// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SysMatriculas.Persistencia.EF.Data;

namespace SysMatriculas.Persistencia.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190629203709_asfadf")]
    partial class asfadf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.CoRequisito", b =>
                {
                    b.Property<int>("CoRequisitosId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisciplinaCoRequisitoId");

                    b.Property<int>("DisciplinaId");

                    b.HasKey("CoRequisitosId");

                    b.HasIndex("DisciplinaCoRequisitoId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("CoRequisitos");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Curriculo", b =>
                {
                    b.Property<int>("CurriculoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CursoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CurriculoId");

                    b.HasIndex("CursoId");

                    b.ToTable("Curriculos");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Turno");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Disciplina", b =>
                {
                    b.Property<int>("DisciplinaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargaHoraria");

                    b.Property<int>("CurriculoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Semestre");

                    b.HasKey("DisciplinaId");

                    b.HasIndex("CurriculoId");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Models.CurriculoDisciplina", b =>
                {
                    b.Property<int>("CurriculoDisciplinaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurriculoId");

                    b.Property<int>("DisciplinaId");

                    b.HasKey("CurriculoDisciplinaId");

                    b.HasIndex("CurriculoId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("CurriculosDisciplinas");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Models.TipoDeUsuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("TiposDeUsuarios");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UsuarioId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Ativo");

                    b.Property<string>("CPF");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("EmailConfirmacao");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("LoginNormalizado")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("Senha");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Telefone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("TelefoneConfirmacao");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SobreNome");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasColumnName("Login")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[LoginNormalizado] IS NOT NULL");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("SysMatriculas.Dominio.PreRequisito", b =>
                {
                    b.Property<int>("PreRequisitosId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisciplinaId");

                    b.Property<int>("DisciplinaPreRequisitoId");

                    b.HasKey("PreRequisitosId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("DisciplinaPreRequisitoId");

                    b.ToTable("PreRequisitos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Models.TipoDeUsuario")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Models.TipoDeUsuario")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysMatriculas.Dominio.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Models.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysMatriculas.Dominio.CoRequisito", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Disciplina", "DisciplinaCoRequisito")
                        .WithMany("CoRequisitos")
                        .HasForeignKey("DisciplinaCoRequisitoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SysMatriculas.Dominio.Disciplina", "DisciplinaBase")
                        .WithMany("DisciplinasOndeECoRequisito")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Curriculo", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Curso", "Curso")
                        .WithMany("Curriculos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Disciplina", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Curriculo", "Curriculo")
                        .WithMany()
                        .HasForeignKey("CurriculoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysMatriculas.Dominio.Models.CurriculoDisciplina", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Curriculo", "Curriculo")
                        .WithMany("CurriculosDisciplinas")
                        .HasForeignKey("CurriculoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SysMatriculas.Dominio.Disciplina", "Disciplina")
                        .WithMany("CurriculosDisciplinas")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SysMatriculas.Dominio.PreRequisito", b =>
                {
                    b.HasOne("SysMatriculas.Dominio.Disciplina", "DisciplinaBase")
                        .WithMany("PreRequisitosBase")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SysMatriculas.Dominio.Disciplina", "DisciplinaPreRequisito")
                        .WithMany("PreRequisitos")
                        .HasForeignKey("DisciplinaPreRequisitoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
